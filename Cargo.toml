[package]
name = "cheetoh"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]

http = { version = "1", optional = true }
leptos = { version = "0.6", features = [] }
leptos_meta = { version = "0.6", features = [] }
leptos_actix = { version = "0.6", optional = true }
leptos_router = { version = "0.6", features = [] }

# dependencies for client (enable when csr or hydrate set)
wasm-bindgen = { version = "0.2", optional = true }
console_log = { version = "1", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }

# dependencies for server (enable when ssr set)
actix-files = { version = "0.6", optional = true }
actix-web = { version = "4", features = ["macros"], optional = true }
futures = { version = "0.3", optional = true }
simple_logger = { version = "4.0", optional = true }
serde = { version = "1", features = ["derive"],optional = true }
serde_json = {version = "1", optional = true}
dotenv = {version = "0", optional = true}
sqlx = { version = "0", features = [ "runtime-tokio-rustls", "sqlite", "uuid", "chrono", "json"], optional = true}
log = {version = "0", optional = true}
uuid = { version = "1", features = ["serde", "v4"], optional = true}
env_logger = {version = "0", optional = true}
[features]
default = ["ssr"]
hydrate = [
    "leptos/hydrate",
    "leptos_meta/hydrate",
    "leptos_router/hydrate",
    "dep:wasm-bindgen",
    "dep:console_log",
    "dep:console_error_panic_hook",
]
csr = [
    "leptos/csr",
    "leptos_meta/csr",
    "leptos_router/csr",
    "dep:wasm-bindgen",
    "dep:console_log",
    "dep:console_error_panic_hook",
]
ssr = [ 
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:leptos_actix",
    "dep:actix-web",
    "dep:actix-files",
    "dep:futures",
    "dep:simple_logger",
    "dep:serde",
    "dep:serde_json",
    "dep:dotenv",
    "dep:sqlx",
    "dep:log",
    "dep:uuid",
    "dep:env_logger",
]

[package.metadata.cargo-all-features]
denylist = [
    "actix-files",
    "actix-web",
    "console_error_panic_hook",
    "console_log",
    "futures",
    "leptos_actix",
    "simple_logger",
    "wasm-bindgen",
    "serde",
    "serde_json",
    'dotenv',
    'sqlx',
    'log',
    'uuid',
    'env_logger',
]
skip_feature_sets = [["csr", "ssr"], ["csr", "hydrate"], ["ssr", "hydrate"]]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[profile.release]
codegen-units = 1
lto = true
opt-level = 'z'

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "cheetoh"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# Optional, Activates the tailwind build
tailwind-input-file = "style/tailwind.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
